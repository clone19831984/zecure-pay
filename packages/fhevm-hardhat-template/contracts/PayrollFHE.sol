// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import { SepoliaConfig } from "@fhevm/solidity/config/ZamaConfig.sol";
import "./ConfidentialToken.sol";

contract PayrollFHE is SepoliaConfig {
    address public owner;
    ConfidentialToken public token;

    constructor(address _token) {
        owner = msg.sender;
        token = ConfidentialToken(_token);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    /// üöÄ C√°ch 1: Mint tr·ª±c ti·∫øp v√†o Payroll (d√πng cho token ri√™ng b·∫°n deploy)
    function fundPayroll(
        externalEuint64 encAmount,
        bytes calldata proof
    ) external onlyOwner {
        token.mintConfidential(address(this), encAmount, proof);
    }

    /// üöÄ C√°ch 2: N·∫°p qu·ªπ t·ª´ v√≠ owner (d√πng cho token c·ªông ƒë·ªìng, vd ZUSD)
    function fundFromWallet(
        externalEuint64 encAmount,
        bytes calldata proof
    ) external onlyOwner {
        token.transferConfidential(address(this), encAmount, proof);
    }

    /// Tr·∫£ l∆∞∆°ng 1 user
    function paySalary(
        address user,
        externalEuint64 encAmount,
        bytes calldata proof
    ) external onlyOwner {
        token.transferConfidential(user, encAmount, proof);
    }

    /// Tr·∫£ l∆∞∆°ng nhi·ªÅu user 1 l·∫ßn
    function paySalaries(
        address[] calldata users,
        externalEuint64[] calldata encAmounts,
        bytes[] calldata proofs
    ) external onlyOwner {
        require(users.length == encAmounts.length, "Length mismatch");
        require(users.length == proofs.length, "Length mismatch");

        for (uint256 i = 0; i < users.length; i++) {
            token.transferConfidential(users[i], encAmounts[i], proofs[i]);
        }
    }

    /// Xem s·ªë d∆∞ encrypted c·ªßa Payroll
    function getPayrollBalance() external view onlyOwner returns (euint64) {
        return token.getEncryptedBalance(address(this));
    }
}
